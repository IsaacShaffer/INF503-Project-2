GENERAL OVERVIEW

Genome Size: 5,227,294 bases long Antracis bacteria genome 
We include the reverse complement (3’-5’) giving us a total size of 10,454,588. 
Query Size used in this project is 100 bases long and we have 15901538 read set 

We impored the blast approach.
-Seed size was chosen to be 23
-Total Nodes for 5’-3’: 62,311,380. 
-Estimated trie size: 3.25 GB 
-Max recurrences of Seeds: 13 

BASIC IDEA
This is fundamentally a BLAST algorithm that is going to be forced to be exhaustive. It will take a genome (with size of G) and break it down into seeds of size 23 (explanation for seed size is below). It then creates a prefix trie from the seeds and recording the location in the genome for each seed in the trie. 

The routine then executes each query as follows: 
	1. Initialize a bitarray that is G − 23 + 1 long.
	2. Break query into seeds of size 23.
	3. Search trie with seeds. If seed is in trie, flip the bits in the bit array associated with the seed locations.
	4. When all query seeds have been checked against the trie, examine a moving total (of the same length as number                  of seeds in query) of the bitarray.
	5. Check location with largest total using Smith-Waterman. Keep alignment is it has 3 or less SNPs (single nucleotide            polymorphisms). 
	6. If no alignment found in previous step, decrease moving total by one and repeat last step. Stop when moving total 
	   less than or equal to 9 (See discussion below about exhaustive criteria). 

EXHAUSTIVENESS

Considering the worst case scenario, we are intersted in introducing SNP's in the read such that most of the seed will be broken.
We do this by evenly distributing our 3 SNP's across the read. In our case since the read is 100 bases long, the SNP's were introduced at positions 25, 50, and 75. With these positions we are certain of the breaking all seeds with the exception of one. Therefore, we have just one surving seed. 
To get a reasonable amount of seeds in order to be exhaustive, we chose a seed size of 23 with a minimum of 9 surviving seed in the worst case scenario.
With at least this number, we are guaranteed of exhaustiveness. We can actually find an allignment when one exists.


How to calculate the number of surviving Seeds.

We have:

- Number of surving Seeds = [seq length- ((#of SNP+1)(seed size))] +1        *** where seq length=100

Seed size for any SNP = seq length /(# of SNP+1) 
- Seed size for 3 SNP = 100/4 =2 5   (in this case, we will find at least one surviving seed) 

From the table below, we have the seed size and the number of surviving seeds

Seed Size--------# of surviving seeds
25------|-----1
24------|-----5
23------|-----9
22------|-----13
21------|-----17

Suppose we have Seq length = 100 , and 3 SNP and we need size of seed equal 25 ,24, and 23 . 

Below are the calculation of the number of surviving seed.

# of Seed survive= [100 – ((3+1)(25))] +1 = [0+1]=1
# of Seed survive= [100 – ((4)(24))] +1 = [4 +1]=5
# of Seed survive= [100 – ((4)(23))] +1 = [8 +1]=9.



->How did we get 9 seeds?

If we have Seq length 100, 3 SNP's, and also have seed size of 23, then in worst case scenario we will have at least 8+1 seeds survive. (the calculation of the number of surviving seed) 

-> Why our SEED is Exhaustive?	
If our seed size = 23 and we have 3 SNP then for our worst-case scenario, which in here is equal to 9 seeds surviving. We use these seeds for our alignment by using the Levenshtein approach (Levenshtein edit distance function modified to break calculation when SNP limit met) to come up with an exhaustive search.



